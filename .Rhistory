cat("No data for this district")
} else{
ggplot(., aes(x = year, y = status, fill = year)) +
geom_col() +
scale_y_continuous(labels = scales::percent) +
theme_economist_white() +
scale_fill_viridis_d(option = "viridis") +
theme(panel.grid.major.y = element_blank()) +
ggtitle(el_progress_2$district) +
labs(subtitle = "English Learner Progress",
caption = "Source: California Department of Education",
x = NULL, y = NULL, fill = NULL) +
theme(legend.position = "none")
}
}
ggplotly(el) %>%
layout(legend = list(orientation = "h", x = 0.4, y = -0.2))
achv_gap_2 <- achv_gap %>%
pivot_longer(cols = c("no_choices", "pos_choices"),
names_to = "group", values_to = "percent") %>%
filter(district == params$district)
gaps <- ggplot(achv_gap_2, aes(x = year, y = percent, fill = group)) +
geom_col(position = "dodge") +
coord_flip() +
scale_y_continuous(labels = scales::percent) +
scale_fill_viridis_d(labels = c("Disadvantaged", "Non-Disadvantaged")) +
theme_economist_white() +
theme(panel.grid.major.y = element_blank()) +
theme(legend.position = "bottom", legend.direction = "horizontal",
) +
ggtitle(achv_gap_2$district) +
labs(subtitle = "Achievement Gap Economically/Non-Economically Disadvantaged",
caption = "Source: California Department of Education",
x = NULL, y = NULL, fill = NULL)
ggplotly(gaps) %>%
layout(legend = list(orientation = "h", x = 0.4, y = -0.2))
chronic_1 <- chronic %>%
filter(district == params$district)
chrn <- chronic_1 %>%
{if(nrow(chronic_1) == 0) {
cat("No data for this district")
} else{
ggplot(., aes(x = change, y = absenteeism_indicator, shape = enrollment_type,
color = enrollment_type)) +
geom_point(size = 4) +
theme(panel.grid.major.y = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank()) +
scale_y_continuous(
labels = scales::percent,
limits = c(0, 0.4)) +
scale_x_continuous(labels = scales::percent) +
scale_color_viridis_d() +
ggtitle(chronic_1$district) +
labs(subtitle = "Chronic Abenteeism",
caption = "Source: California Department of Education",
x = 'Percent change last year', y = 'Percent chronically absent', fill = NULL)
}
}
plotly::ggplotly(chrn) %>%
layout(legend = list(orientation = "h", x = 0.2, y = -0.25))
drop_1 <- drop %>%
filter(district == params$district)
drp <- drop_1 %>%
{if(nrow(drop_1) == 0) {
cat("No data for this district")
} else{
ggplot(., aes(x = year, y = status, group = breakdown_type, color = breakdown_type)) +
geom_line(
size = 1) +
geom_point(size = 2.5) +
geom_text_repel(aes(
label = ifelse(year == "2020", scales::percent(status, accuracy = 2L), "")),
force        = 0.5,
nudge_x      = 0.2,
direction    = "y",
hjust        = 0,
segment.size = 0.2,
fontface     = "bold",
show.legend = FALSE) +
ggtitle(drop_1$district) +
labs(subtitle = "Dropout Rate",
caption = "Source: California Department of Education",
x = NULL, y = NULL, fill = NULL) +
scale_y_continuous(
labels = scales::percent_format(),
limits = c(0, 0.4)) +
theme_economist_white() +
scale_color_viridis_d() +
theme(panel.grid.major.y = element_blank()) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank())
}
}
plotly::ggplotly(drp) %>%
layout(legend = list(orientation = "h", x = 0.2, y = -0.3))
ag_1 <- ag %>%
filter(district == params$district)
ag_1 %>%
{if(nrow(ag_1) == 0) {
cat("No data for this district")
} else{
agc <- ggplot(., aes(x = year, y = status, group = enrollment_type,
color = enrollment_type)) +
geom_line(
size = 1) +
geom_point(size = 2.5) +
geom_text_repel(aes(
label = ifelse(year == "2019", scales::percent(status, accuracy = 2L), "")),
force        = 0.5,
nudge_x      = 0.2,
direction    = "y",
hjust        = 0,
segment.size = 0.2,
fontface     = "bold",
show.legend = FALSE) +
ggtitle(ag_1$district) +
labs(subtitle = "A-G Completion Rate",
caption = "Source: California Department of Education",
x = NULL, y = NULL, fill = NULL) +
scale_y_continuous(
labels = scales::percent_format(),
limits = c(0, 1)) +
theme_economist_white() +
scale_color_viridis_d() +
theme(panel.grid.major.y = element_blank()) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank())
}
}
plotly::ggplotly(agc) %>%
layout(legend = list(orientation = "h", x = 0.2, y = -0.2))
ag_1 <- ag %>%
filter(district == params$district)
agc <_ ag_1 %>%
ag_1 <- ag %>%
filter(district == params$district)
agc <- ag_1 %>%
{if(nrow(ag_1) == 0) {
cat("No data for this district")
} else{
agc <- ggplot(., aes(x = year, y = status, group = enrollment_type,
color = enrollment_type)) +
geom_line(
size = 1) +
geom_point(size = 2.5) +
geom_text_repel(aes(
label = ifelse(year == "2019", scales::percent(status, accuracy = 2L), "")),
force        = 0.5,
nudge_x      = 0.2,
direction    = "y",
hjust        = 0,
segment.size = 0.2,
fontface     = "bold",
show.legend = FALSE) +
ggtitle(ag_1$district) +
labs(subtitle = "A-G Completion Rate",
caption = "Source: California Department of Education",
x = NULL, y = NULL, fill = NULL) +
scale_y_continuous(
labels = scales::percent_format(),
limits = c(0, 1)) +
theme_economist_white() +
scale_color_viridis_d() +
theme(panel.grid.major.y = element_blank()) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank())
}
}
plotly::ggplotly(agc) %>%
layout(legend = list(orientation = "h", x = 0.2, y = -0.2))
# figure out how to source child/parent?
teach_stu_ratio <- read.csv(file = here("data", "district_ratios.csv")) #see script
susp <- read.csv(file = here("data", "all_districts_susp.csv"))
grad_rate <- read.csv(file = here("data", "all_districts_grad_rate2.csv"))
el_progress <- read.csv(file = here("data", "all_districts_el_progress.csv"))
achv_gap <- read.csv(file = here("data", "all_districts_achv_gap2.csv"))
chronic <- read.csv(file = here("data", "all_districts_chronic2.csv"))
drop <- read.csv(file = here("data", "all_districts_dropout_rate.csv"))
ag <- read.csv(file = here("data", 'uc_ag_rate_2.csv'))
teach_stu_ratio <- teach_stu_ratio %>%
dplyr::rename(race_eth = "X1", year = "X2", dist_name = "X3")
teach_stu_ratio <- janitor::clean_names(teach_stu_ratio)
susp <- janitor::clean_names(susp)
grad_rate <- janitor::clean_names(grad_rate)
el_progress <- janitor::clean_names(el_progress)
achv_gap <- janitor::clean_names(achv_gap)
chronic <- janitor::clean_names(chronic)
drop <- janitor::clean_names(drop)
ag <- janitor::clean_names(ag)
teach_stu_ratio <- teach_stu_ratio %>%
mutate(Ttudent = as.numeric(sub("%","", teach_stu_ratio$student))/100,
Teacher = as.numeric(sub("%","", teach_stu_ratio$teacher))/100)
teach_stu_ratio$race_eth[teach_stu_ratio$race_eth == "Caucasian"] <- "White"
susp <- susp %>%
mutate(status = as.numeric(sub("%","", susp$status))/100,
year = as.factor(year),
enrollment_type = as.factor(enrollment_type))
grad_rate <- grad_rate %>%
mutate(status = as.numeric(sub("%","", grad_rate$status))/100,
year = as.factor(year),
enrollment_type = as.factor(enrollment_type))
el_progress <- el_progress %>%
mutate(status = as.numeric(sub("%","", el_progress$status))/100,
year = as.factor(year))
achv_gap <- achv_gap %>%
mutate(Disadvantaged = as.numeric(sub("%","", achv_gap$no_choices))/100,
Non_Disadvantaged = as.numeric(sub("%","", achv_gap$pos_choices))/100,
year = as.factor(year))
chronic <- chronic %>%
mutate(absenteeism_indicator = as.numeric(sub("%","", chronic$absenteeism_indicator))/100,
change = as.numeric(sub("%","", chronic$change))/100,
year = substr(chronic$data_set, 6, 9),
year = as.factor(year))
drop <- drop %>%
mutate(status = as.numeric(sub("%","", drop$result_2))/100,
year = as.factor(year),
breakdown_type = as.factor(breakdown_type))
ag <- ag %>%
mutate(status = as.numeric(sub("%","", ag$status))/100,
year = as.factor(year),
enrollment_type = as.factor(enrollment_type))
# figure out how to source child/parent?
teach_stu_ratio <- read.csv(file = here("data", "district_ratios.csv")) #see script
susp <- read.csv(file = here("data", "all_districts_susp.csv"))
grad_rate <- read.csv(file = here("data", "all_districts_grad_rate2.csv"))
el_progress <- read.csv(file = here("data", "all_districts_el_progress.csv"))
achv_gap <- read.csv(file = here("data", "all_districts_achv_gap2.csv"))
chronic <- read.csv(file = here("data", "all_districts_chronic2.csv"))
drop <- read.csv(file = here("data", "all_districts_dropout_rate.csv"))
ag <- read.csv(file = here("data", 'uc_ag_rate_2.csv'))
teach_stu_ratio <- teach_stu_ratio %>%
dplyr::rename(race_eth = "X1", year = "X2", dist_name = "X3")
teach_stu_ratio <- janitor::clean_names(teach_stu_ratio)
susp <- janitor::clean_names(susp)
grad_rate <- janitor::clean_names(grad_rate)
el_progress <- janitor::clean_names(el_progress)
achv_gap <- janitor::clean_names(achv_gap)
chronic <- janitor::clean_names(chronic)
drop <- janitor::clean_names(drop)
ag <- janitor::clean_names(ag)
teach_stu_ratio <- teach_stu_ratio %>%
mutate(Student = as.numeric(sub("%","", teach_stu_ratio$student))/100,
Teacher = as.numeric(sub("%","", teach_stu_ratio$teacher))/100)
teach_stu_ratio$race_eth[teach_stu_ratio$race_eth == "Caucasian"] <- "White"
susp <- susp %>%
mutate(status = as.numeric(sub("%","", susp$status))/100,
year = as.factor(year),
enrollment_type = as.factor(enrollment_type))
grad_rate <- grad_rate %>%
mutate(status = as.numeric(sub("%","", grad_rate$status))/100,
year = as.factor(year),
enrollment_type = as.factor(enrollment_type))
el_progress <- el_progress %>%
mutate(status = as.numeric(sub("%","", el_progress$status))/100,
year = as.factor(year))
achv_gap <- achv_gap %>%
mutate(Disadvantaged = as.numeric(sub("%","", achv_gap$no_choices))/100,
Non_Disadvantaged = as.numeric(sub("%","", achv_gap$pos_choices))/100,
year = as.factor(year))
chronic <- chronic %>%
mutate(absenteeism_indicator = as.numeric(sub("%","", chronic$absenteeism_indicator))/100,
change = as.numeric(sub("%","", chronic$change))/100,
year = substr(chronic$data_set, 6, 9),
year = as.factor(year))
drop <- drop %>%
mutate(status = as.numeric(sub("%","", drop$result_2))/100,
year = as.factor(year),
breakdown_type = as.factor(breakdown_type))
ag <- ag %>%
mutate(status = as.numeric(sub("%","", ag$status))/100,
year = as.factor(year),
enrollment_type = as.factor(enrollment_type))
library(tidyverse)
library(plotly)
library(plyr)
library(flexdashboard)
library(here)
library(shiny)
library(crosstalk)
library(ggthemes)
library(htmltools)
library(ggrepel)
library(janitor)
goals <- read.csv(file = here("data", '2021 LCAP Goals by LEA.csv'))
View(goals)
goals <- read.csv(file = here("data", '2021 LCAP Goals by LEA.csv'))
View(goals)
goals <- janitor::clean_names(goals)
View(goals)
goals1 <- goals %>%
filter(lea == params$district)
goals1 <- goals %>%
filter(lea == params$district)
# usrCount is a reactive expression that keeps an approximate
# count of all of the unique users that have been seen since the
# app started.
apportion <- goals1$percentage_to_increase_or_improve_services
# Emit the user count
renderValueBox({
valueBox(value = apportion, icon = "fa-users")
})
goals1 <- goals %>%
filter(lea == params$district)
# usrCount is a reactive expression that keeps an approximate
# count of all of the unique users that have been seen since the
# app started.
apportion <- goals1$percentage_to_increase_or_improve_services
# Emit the user count
valueBox(value = apportion, icon = "fa-users")
goals1 <- goals %>%
filter(lea == params$district)
# usrCount is a reactive expression that keeps an approximate
# count of all of the unique users that have been seen since the
# app started.
apportion <- goals1$percentage_to_increase_or_improve_services
# Emit the user count
valueBox(goals1$percentage_to_increase_or_improve_services, icon = "fa-users")
goals1 <- goals %>%
filter(lea == params$district)
# usrCount is a reactive expression that keeps an approximate
# count of all of the unique users that have been seen since the
# app started.
apportion <- goals1$percentage_to_increase_or_improve_services
# Emit the user count
valueBox(goals1$percentage_to_increase_or_improve_services, icon = "fa-users")
goals1 <- goals %>%
filter(lea == params$district)
apportion <- goals1$percentage_to_increase_or_improve_services
# Values
valueBox(goals1$percentage_to_increase_or_improve_services, icon = "fa-users")
apportion <- goals1$percentage_to_increase_or_improve_services
glimpse(goals$percentage_to_increase_or_improve_services)
?valueBox
goals1 <- goals %>%
filter(lea == params$district)
# Values
valueBox(42, icon = "fa-users")
valueBox(42, caption = "Increased Apportionment", icon = "fa-tag")
goals1 <- goals %>%
filter(lea == params$district)
# Values
valueBox(42, caption = "Increased Apportionment", icon = "fa-tag")
goals1 <- goals %>%
filter(lea == params$district)
# Values
apportion <- goals1$increased_apportionment_based_on_the_enrollment_of_foster_youth_english_learners_and_low_income_students
valueBox(apportion, caption = "Increased Apportionment", icon = "fa-tag")
goals1 <- goals %>%
filter(lea == params$district)
# Values
apportion <- goals1$percentage_to_increase_or_improve_services
valueBox(apportion, caption = "Increased Apportionment", icon = "fa-tag")
goals1 <- goals %>%
filter(lea == params$district)
# Values
apportion <- goals$percentage_to_increase_or_improve_services
valueBox(apportion, caption = "Increased Apportionment", icon = "fa-tag")
apportion <- goals$percentage_to_increase_or_improve_services
valueBox(apportion, caption = "Increased Apportionment", icon = "fa-tag")
goals %>%
filter(lea == "Alpine Union School District")
# Values
apportion <- goals$percentage_to_increase_or_improve_services
valueBox(apportion, caption = "Increased Apportionment", icon = "fa-tag")
goals1 <- goals %>%
filter(lea == "Alpine Union School District")
apportion <- goals1$percentage_to_increase_or_improve_services
valueBox(apportion, caption = "Increased Apportionment", icon = "fa-tag")
goals1 <- goals %>%
filter(lea == params$district)
# Values
apportion <- goals1$percentage_to_increase_or_improve_services
valueBox(apportion, caption = "Increased Apportionment", icon = "fa-tag")
View(goals1)
goals1 <- goals %>%
filter(lea == params$district)
# Values
apportion <- goals1$percentage_to_increase_or_improve_services
valueBox(apportion, caption = "Increased Apportionment", icon = "fa-tag")
goals1 <- goals %>%
filter(lea == 'Alpine Union School District')
# Values
apportion <- goals1$percentage_to_increase_or_improve_services
valueBox(apportion, caption = "Increased Apportionment", icon = "fa-tag")
View(goals1)
View(goals1)
View(goals1)
goals <- goals %>%
mutate(lea = gsub("School District", "", .))
goals <- goals %>%
mutate(lea = gsub(" School District", "", .))
View(goals)
View(teach_stu_ratio)
goals <- goals %>%
mutate(lea = gsub(" School District", "", goals$lea))
View(goals)
goals1 <- goals %>%
filter(lea == params$district)
# Values
apportion <- goals1$increased_apportionment_based_on_the_enrollment_of_foster_youth_english_learners_and_low_income_students
valueBox(apportion, caption = "Increased Apportionment", icon = "fa-tag")
goals1 <- goals %>%
filter(lea == params$district)
g1 <- goals1$lcap_goal_1
g2 <- goals1$lcap_goal_2
g3 <- goals1$lcap_goal_3
g4 <- goals1$lcap_goal_4
g5 <- goals1$lcap_goal_5
g6 <- goals1$lcap_goal_6
g7 <- goals1$lcap_goal_7
goals1 <- goals %>%
filter(lea == params$district)
g1 <- goals1$lcap_goal_1
g2 <- goals1$lcap_goal_2
g3 <- goals1$lcap_goal_3
g4 <- goals1$lcap_goal_4
g5 <- goals1$lcap_goal_5
g6 <- goals1$lcap_goal_6
g7 <- goals1$lcap_goal_7
- g1
goals1 <- goals %>%
filter(lea == params$district)
g1 <- goals1$lcap_goal_1
g2 <- goals1$lcap_goal_2
g3 <- goals1$lcap_goal_3
g4 <- goals1$lcap_goal_4
g5 <- goals1$lcap_goal_5
g6 <- goals1$lcap_goal_6
g7 <- goals1$lcap_goal_7
?valueBox
goals1 <- goals %>%
filter(lea == params$district)
g1 <- goals1$lcap_goal_1
g2 <- goals1$lcap_goal_2
g3 <- goals1$lcap_goal_3
g4 <- goals1$lcap_goal_4
g5 <- goals1$lcap_goal_5
g6 <- goals1$lcap_goal_6
g7 <- goals1$lcap_goal_7
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
library(janitor)
library(ggthemes)
library(ggrepel)
teach_stu_ratio <- read.csv(file = here("data", "district_ratios.csv")) #see script
susp <- read.csv(file = here("data", "all_districts_susp.csv"))
grad_rate <- read.csv(file = here("data", "all_districts_grad_rate2.csv"))
el_progress <- read.csv(file = here("data", "all_districts_el_progress.csv"))
achv_gap <- read.csv(file = here("data", "all_districts_achv_gap2.csv"))
chronic <- read.csv(file = here("data", "all_districts_chronic2.csv"))
drop <- read.csv(file = here("data", "all_districts_dropout_rate.csv"))
ag <- read.csv(file = here("data", 'uc_ag_rate_2.csv'))
View(teach_stu_ratio)
# Consider cleaning this up. A lot of repetitive code could use map
teach_stu_ratio <- teach_stu_ratio %>%
dplyr::rename(race_eth = "X1", year = "X2", dist_name = "X3")
teach_stu_ratio <- janitor::clean_names(teach_stu_ratio)
susp <- janitor::clean_names(susp)
grad_rate <- janitor::clean_names(grad_rate)
el_progress <- janitor::clean_names(el_progress)
achv_gap <- janitor::clean_names(achv_gap)
chronic <- janitor::clean_names(chronic)
drop <- janitor::clean_names(drop)
ag <- janitor::clean_names(ag)
teach_stu_ratio <- teach_stu_ratio %>%
mutate(Student = as.numeric(sub("%","", teach_stu_ratio$student))/100,
Teacher = as.numeric(sub("%","", teach_stu_ratio$teacher))/100)
teach_stu_ratio$race_eth[teach_stu_ratio$race_eth == "Caucasian"] <- "White"
susp <- susp %>%
mutate(status = as.numeric(sub("%","", susp$status))/100,
year = as.factor(year),
enrollment_type = as.factor(enrollment_type))
grad_rate <- grad_rate %>%
mutate(status = as.numeric(sub("%","", grad_rate$status))/100,
year = as.factor(year),
enrollment_type = as.factor(enrollment_type))
el_progress <- el_progress %>%
mutate(status = as.numeric(sub("%","", el_progress$status))/100,
year = as.factor(year))
achv_gap <- achv_gap %>%
mutate(Disadvantaged = as.numeric(sub("%","", achv_gap$no_choices))/100,
Non_Disadvantaged = as.numeric(sub("%","", achv_gap$pos_choices))/100,
year = as.factor(year))
chronic <- chronic %>%
mutate(absenteeism_indicator = as.numeric(sub("%","", chronic$absenteeism_indicator))/100,
change = as.numeric(sub("%","", chronic$change))/100,
year = substr(chronic$data_set, 6, 9),
year = as.factor(year))
drop <- drop %>%
mutate(status = as.numeric(sub("%","", drop$result_2))/100,
year = as.factor(year),
breakdown_type = as.factor(breakdown_type))
ag <- ag %>%
mutate(status = as.numeric(sub("%","", ag$status))/100,
year = as.factor(year),
enrollment_type = as.factor(enrollment_type))
View(teach_stu_ratio)
View(susp)
View(grad_rate)
View(el_progress)
View(achv_gap)
View(chronic)
View(drop)
View(ag)
View(ag)
View(goals)
